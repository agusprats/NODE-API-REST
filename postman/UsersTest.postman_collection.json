{
	"info": {
		"_postman_id": "07fb8cda-c5dd-4891-a752-a81638be6fd6",
		"name": "Users Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is not 500\", function () {",
									"    pm.response.to.not.have.status(500);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Reponse has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.token).to.be.an('string');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"    pm.collectionVariables.set('token', jsonData.data.token);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"email\": \"marce@mail.com\",\n    \"password\": \"conejablanca\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/auth/login",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Status code is not 200\", function () {",
									"    pm.response.to.not.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Reponse has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"    pm.expect(jsonData.error.message).to.be.an('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"email\": \"noexist@mail.com\",\n    \"password\": \"conejablanca\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/auth/login",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Invalid  Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Status code is not 200\", function () {",
									"    pm.response.to.not.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Reponse has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"    pm.expect(jsonData.error.message).to.be.an('string');",
									"    pm.expect(jsonData.error).to.have.property('detail');",
									"    pm.expect(jsonData.error.detail).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"email\": \"not is a mail\",\n    \"password\": \"conejablanca\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/auth/login",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Users",
			"item": [
				{
					"name": "Get All - Complete filters - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code is not 500\", function () {",
									"    pm.response.to.not.have.status(500);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Reponse has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('docs');",
									"    pm.expect(jsonData.data.docs).to.be.an('array');",
									"    pm.expect(jsonData.data).to.have.property('totalDocs');",
									"    pm.expect(jsonData.data.totalDocs).to.be.an('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{basepath}}/users?filter[name]=Marcelo&filter[email]=marce@mail.com&options[limit]=10&options[offset]=0&filter[lastName]=Fiorentillo",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "filter[name]",
									"value": "Marcelo"
								},
								{
									"key": "filter[email]",
									"value": "marce@mail.com"
								},
								{
									"key": "options[limit]",
									"value": "10"
								},
								{
									"key": "options[offset]",
									"value": "0"
								},
								{
									"key": "filter[lastName]",
									"value": "Fiorentillo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All - Without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Status code is not 500\", function () {",
									"    pm.response.to.not.have.status(500);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Reponse has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"    pm.expect(jsonData.error.message).to.be.an('string');",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{basepath}}/users?filter[name]=Marcelo&filter[email]=marce@mail.com&options[limit]=10&options[offset]=0&filter[lastName]=Fiorentillo",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "filter[name]",
									"value": "Marcelo"
								},
								{
									"key": "filter[email]",
									"value": "marce@mail.com"
								},
								{
									"key": "options[limit]",
									"value": "10"
								},
								{
									"key": "options[offset]",
									"value": "0"
								},
								{
									"key": "filter[lastName]",
									"value": "Fiorentillo"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Save User",
			"item": [
				{
					"name": "Save User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Status code is not 500\", function () {",
									"    pm.response.to.not.have.status(500);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Reponse has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data.email).to.be.an('string');",
									"    pm.expect(jsonData.data).to.have.property('_id');",
									"    pm.expect(jsonData.data._id).to.be.an('string');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"randomNumber\", Math.random());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Marcelo\",\n    \"lastName\": \"Fiorentillo\",\n    \"email\": \"{{randomNumber}}@mail.com\",\n    \"password\": \"conejablanca\",\n    \"birthdate\": \"04/23/1999\",\n    \"role\":\"USER_ROLE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/users",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save User - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Status code is not 500\", function () {",
									"    pm.response.to.not.have.status(500);",
									"});",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Response is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Reponse has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"    pm.expect(jsonData.error.message).to.be.an('string');",
									"    pm.expect(jsonData.error).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"randomNumber\", Math.random());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Marcelo\",\n    \"lastName\": \"Fiorentillo\",\n    \"email\": \"marce@mail.com\",\n    \"password\": \"conejablanca\",\n    \"birthdate\": \"04/23/1999\",\n    \"role\":\"USER_ROLE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/users",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update User",
			"item": [
				{
					"name": "Update User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.have.property('email');\r",
									"    pm.expect(jsonData.data.email).to.be.an('string');\r",
									"    pm.expect(jsonData.data).to.have.property('_id');\r",
									"    pm.expect(jsonData.data._id).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Luciano\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/users/:id",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.have.property('message');\r",
									"    pm.expect(jsonData.error.message).to.be.an('string');\r",
									"    pm.expect(jsonData.error).to.have.property('detail');\r",
									"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Luciano\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/users/:id",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "abc123"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete User",
			"item": [
				{
					"name": "Delete User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.have.property('email');\r",
									"    pm.expect(jsonData.data.email).to.be.an('string');\r",
									"    pm.expect(jsonData.data).to.have.property('_id');\r",
									"    pm.expect(jsonData.data._id).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{basepath}}/users/:id",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.have.property('message');\r",
									"    pm.expect(jsonData.error.message).to.be.an('string');\r",
									"    pm.expect(jsonData.error).to.have.property('detail');\r",
									"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{basepath}}/users/:id",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "abc123"
								}
							]
						}
					},
					"response": []
				}
			]
		}

	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		}
	]
}